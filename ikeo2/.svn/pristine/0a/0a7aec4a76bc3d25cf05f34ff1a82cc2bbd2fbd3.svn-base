package com.ikeo.review.controller;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpSession;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;

import com.ikeo.member.vo.LoginVO;
import com.ikeo.product.pageObject.ProductPageObject;
import com.ikeo.review.service.ReviewReplyService;
import com.ikeo.review.service.ReviewService;
import com.ikeo.review.vo.ReviewVO;
import com.ikeo.util.page.ReplyPageObject;

import com.webjjang.util.file.FileUtil;

import lombok.Data;

@Controller
@Data
@RequestMapping("/review")
public class ReviewController {

	@Autowired
	@Qualifier("reviewServiceImpl")
	private ReviewService service;

	@Autowired
	@Qualifier("reviewReplyServiceImpl")
	private ReviewReplyService replyservice;

	// 저장하려는 파일의 위치
	String path = "/upload/image";

	private MultipartFile imageFile;

	@GetMapping("/list.do")
	public String list(Model model, @ModelAttribute ProductPageObject pageObject, HttpServletRequest request)
			throws Exception {
		System.out.println("reviewcontroller.list()");
		String perPageNumStr = request.getParameter("perPageNum");
		pageObject.setPerPageNum((perPageNumStr == null) ? 8L : Long.parseLong(perPageNumStr));
		model.addAttribute("list", service.list(pageObject));
		System.out.println("reviewcontroller.model() - " + model);

		return "review/list";
	}

	@GetMapping("/view.do")
	public String view(Long no, Model model, HttpServletRequest request) throws Exception {
		System.out.println("ReviewController.view().no = " + no);
		model.addAttribute("vo", service.view(no));
		// 이미지 텍스트 데이터 가져오기
		// 공백 / < / > / 줄바꿈 처리
		ReviewVO vo = service.view(no);
		vo.setContent(
				vo.getContent().replace(" ", "&nbsp;").replace("<", "&lt;").replace(">", "&gt;").replace("\n", "<br>"));
		model.addAttribute("vo", vo);
		System.out.println("ReviewReplyController.vo - " + vo);
		String strReplyPage = request.getParameter("replyPage");

		Long replyPage = (strReplyPage == null || strReplyPage.equals("")) ? 1 : Long.parseLong(strReplyPage);
		Long replyPerPageNum = 10L;

		ReplyPageObject replyPageObject = new ReplyPageObject();
		replyPageObject.setPage(replyPage);
		replyPageObject.setPerPageNum(replyPerPageNum);

		replyPageObject.setNo(no);

		model.addAttribute("replyPageObject", replyservice.list(no, replyPageObject));
		System.out.println("$##$#$@#$#$#$#$$@#$#$" + replyPageObject);

		return "review/view";
	}

	// 글등록 폼.
	@GetMapping("/write.do")
	public String writeForm(Long itemNo, HttpSession session, RedirectAttributes rttr) throws Exception {
		System.out.println("ReviewController.writeForm() 아이템넘보 는?" + itemNo);
		ReviewVO vo = new ReviewVO();
		vo.setItemNo(itemNo);
		if (((LoginVO) session.getAttribute("login")) != null) {
			vo.setId(((LoginVO) session.getAttribute("login")).getId());
			System.out.println("zzzzzzzzzzzzzzzzzzzzzzzz" + service.checkReview(vo));
			if (((LoginVO) session.getAttribute("login")).getGrade_no() != 9) {

				if (service.checkReview(vo) == null) {
					rttr.addFlashAttribute("msg", "구매하지 않은 상품은 리뷰를 작성할 수 없습니다.");

					return "redirect:/product/view.do?no=" + itemNo;
				} else {
					return "review/write";
				}
			}
		}
		return "review/list";
	}

	@PostMapping("/write.do")
	public String write(ReviewVO vo, Long perPageNum, HttpServletRequest request, HttpSession session,
			RedirectAttributes rttr) throws Exception {

		System.out.println("ReviewController.write().vo - " + vo);

		vo.setId(((LoginVO) session.getAttribute("login")).getId());

		System.out.println("ReviewController.write() - 대표이미지 : " + vo.getImageFile().getOriginalFilename());

		String fileName = FileUtil.upload(path, vo.getImageFile(), request);
		vo.setFileName(fileName);
		System.out.println("ReviewController.write() - 업로드 파일 정보 : " + fileName);
		service.write(vo);
		rttr.addFlashAttribute("msg", "글등록 완료^^!!");

		return "redirect:list.do";
	}

	@GetMapping("/update.do")
	public String updateForm(Long no, Model model) throws Exception {
		System.out.println("ReviewController.updateForm()");
		model.addAttribute("vo", service.view(no));
		return "review/update";
	}

	@PostMapping("/update.do")
	public String update(ReviewVO vo, Long perPageNum, HttpServletRequest request, HttpSession session,
			RedirectAttributes rttr) throws Exception {

		System.out.println("ReviewController.updateForm().vo - " + vo);
		vo.setId(((LoginVO) session.getAttribute("login")).getId());
		Integer result = service.update(vo);

		if (result == 1)
			rttr.addFlashAttribute("msg", "게시판 글 수정 성공^^!!");
		else
			rttr.addFlashAttribute("msg", "게시판 글 수정 실패 ㅠ ㅠ");
		return "redirect:view.do?no=" + vo.getReNo();

	}

	@GetMapping("/delete.do")
	public String delete(ReviewVO vo, Long perPageNum, HttpSession session, HttpServletRequest request,
			RedirectAttributes rttr) throws Exception {

		System.out.println("ReviewController.delete().vo - " + vo);
		vo.setId(((LoginVO) session.getAttribute("login")).getId());
		service.delete(vo);
		rttr.addFlashAttribute("mag", "글삭제가 완료되었습니다~");

		return "redirect:list.do";
	}

}
