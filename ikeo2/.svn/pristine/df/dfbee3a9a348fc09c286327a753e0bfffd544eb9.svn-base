package com.ikeo.member.ajax.controller;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;

import com.ikeo.member.ajax.service.MemberAjaxService;
import com.ikeo.member.vo.MemberVO;
import com.ikeo.member.vo.SearchVO;

import lombok.Data;

@RestController
@RequestMapping("/memberAjax")
@Data
public class MemberAjaxController {

	@Autowired
	@Qualifier("memberAjaxServiceImpl")
	private MemberAjaxService service;
	
	// 아이디 중복 체크
	@RequestMapping(value = "/checkId.action", method = RequestMethod.GET)
	public Integer checkId(String id) {
		Integer result = 1;
		// 중복 체크 서비스
		// 1 : 중복
		// 0 : 없음
		result = service.checkId(id);
		return result;
	}
	
	// 닉네임 중복 체크
	@RequestMapping(value = "/checkNickname.action", method = RequestMethod.GET)
	public Integer checkNickname(String nickname) {
		Integer result = 1;
		// 중복 체크 서비스
		// 1 : 중복
		// 0 : 없음
		result = service.checkNickname(nickname);
		return result;
	}
	
	// 회원 리스트
	@RequestMapping(value = "/list.action", method = RequestMethod.GET)
	public List<MemberVO> list(SearchVO search) {
		List<MemberVO> list = service.list(search);
		return list;
	}
	
	// 아이디 찾기
	@RequestMapping(value = "/findId.action", method = RequestMethod.POST)
	public String findId(MemberVO vo) {
		String result = service.findId(vo);
		return result;
	}
	
	// 비밀번호 찾기
	@RequestMapping(value = "/findPw.action", method = RequestMethod.POST)
	public Integer findPw(MemberVO vo) {
		// 아이디와 전화번호를 입력받아서 일치하는 계정이 있다면 비밀번호를 재설정해야 합니다
		// 1 : 있음
		// 0 : 없음
		Integer result = service.findPw(vo);
		return result;
	}
	
	// 관리자 페이지 - 등급 변경
	@RequestMapping(value = "/changeGrade.action", method = RequestMethod.POST)
	public Integer changeGrade(MemberVO vo, RedirectAttributes rttr) {
		Integer result = 0;
		result = service.changeGrade(vo);
		if(result == 1) {
			rttr.addFlashAttribute("msg", "등급이 변경되었습니다");
		}
		else {
			rttr.addFlashAttribute("msg", "등급 변경에 실패했습니다");
		}
		return result;
	}
	
	// 관리자 페이지 - 상태 변경
	@RequestMapping(value = "/changeStatus.action", method = RequestMethod.POST)
	public Integer changeStatus(MemberVO vo, RedirectAttributes rttr) {
		Integer result = 0;
		result = service.changeStatus(vo);
		if(result == 1) {
			rttr.addFlashAttribute("msg", "상태가 변경되었습니다");
		}
		else {
			rttr.addFlashAttribute("msg", "상태 변경에 실패했습니다");
		}
		return result;
	}
	
	// 관리자 페이지 - 판매자 신청 승인
	@RequestMapping(value = "/acceptApply.action", method = RequestMethod.POST)
	public Integer acceptApply(MemberVO vo, RedirectAttributes rttr) {
		Integer result = 0;
		result = service.acceptApply(vo);
		if(result == 1) {
			rttr.addFlashAttribute("msg", "판매자 신청이 승인되었습니다");
		}
		else {
			rttr.addFlashAttribute("msg", "판매자 신청 승인에 실패하였습니다");
		}
		return result;
	}
	
	// 관리자 페이지 - 판매자 신청 취소
	@RequestMapping(value = "/cancelApply.action", method = RequestMethod.POST)
	public Integer cancelApply(MemberVO vo, RedirectAttributes rttr) {
		Integer result = 0;
		result = service.cancelApply(vo);
		if(result == 1) {
			rttr.addFlashAttribute("msg", "판매자 신청이 취소되었습니다");
		}
		else {
			rttr.addFlashAttribute("msg", "판매자 신청 취소에 실패하였습니다");
		}
		return result;
	}
}
