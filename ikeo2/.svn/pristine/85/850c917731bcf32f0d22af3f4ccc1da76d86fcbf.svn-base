package com.ikeo.review.controller;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpSession;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;

import com.ikeo.member.vo.LoginVO;
import com.ikeo.review.service.ReviewService;
import com.ikeo.review.vo.ReviewVO;

import com.webjjang.util.file.FileUtil;
import com.webjjang.util.page.PageObject;

import lombok.Data;

@Controller
@Data
@RequestMapping("/review")
public class ReviewController {

	@Autowired
	@Qualifier("reviewServiceImpl")
	private ReviewService service;
	
	// 저장하려는 파일의 위치
	String path = "/upload/image";

	private MultipartFile imageFile;
	
	@GetMapping("/list.do")
	public String list(Model model, @ModelAttribute PageObject pageObject,
			HttpServletRequest request) throws Exception{
		System.out.println("reviewcontroller.list()");
		String perPageNumStr = request.getParameter("perPageNum");
		pageObject.setPerPageNum((perPageNumStr==null)?8L:Long.parseLong(perPageNumStr));
		model.addAttribute("list",service.list(pageObject));
		System.out.println("reviewcontroller.model() - " + model);
		
		return "review/list";
	}		
		
		
		@GetMapping("/view.do")
		public String view(Long no, Model model) throws Exception {
			System.out.println("BoardController.view().no = " + no );
			model.addAttribute("vo", service.view(no));
			// 이미지 텍스트 데이터 가져오기
			// 공백 / < / > / 줄바꿈 처리
			ReviewVO vo = service.view(no);
			vo.setContent(vo.getContent()
					.replace(" ", "&nbsp;").replace("<", "&lt;")
					.replace(">", "&gt;").replace("\n", "<br>"));
			model.addAttribute("vo", vo);
	
			return "review/view";
		}
		
		// 글등록 폼.
		@GetMapping("/write.do")
		public String writeForm() throws Exception {
			System.out.println("ReviewController.writeForm()");
		
			
			return "review/write";
		}
		
		@PostMapping("/write.do")
		public String write(ReviewVO vo, Long perPageNum, HttpServletRequest request,
				HttpSession session, RedirectAttributes rttr) throws Exception{
			
			System.out.println("ReviewController.write().vo - " + vo);
			
			vo.setId(((LoginVO)session.getAttribute("login")).getId());
			
			System.out.println("ImageController.write() - 대표이미지 : " + vo.getImageFile().getOriginalFilename());
			
			String fileName = FileUtil.upload(path, vo.getImageFile(), request);
			vo.setFileName(fileName);
			System.out.println("ReviewController.write() - 업로드 파일 정보 : " + fileName);
			service.write(vo);
			rttr.addFlashAttribute("mag", "글등록 완료^^!!");
			
			return "redirect:list.do?perPageNum=" + perPageNum;
		}
		
		
        
		

	
}
